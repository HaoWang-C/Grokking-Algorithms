1. 广度优先算法找到段数最少的路径, 狄克斯特拉算法(Dijkstra's algorithm)找出最快的路径

2. 加权图: 每条边都有权重(weight)

3. 无向图中, 每条边都是一个环

4. 狄克斯特拉算法只适用于有向无环图(directed acyclic graphy, DAG)

5. 狄克斯特拉算法不适用于有负权边的图(用 Bellman-Ford algorithm 可以解决)

6. 算法的基本步骤:
   a. 找出最便宜(最短时间)的节点
   b. 对于该节点的邻居, 检查是否有前往它们的更短路径, 如果有, 更新其开销和父节点
   c. 重复这个过程, 直到对图中每个节点都这样做了
   d. 计算最终路径
   
7. 代码以及思路
    #创建图
    graph = {}
    graph['start'] = {'a': 6, 'b': 2}
    graph['a'] = {'fin': 1}
    graph['b'] = {'a': 3, 'fin': 5}
    graph['fin'] = {}

    #创建costs散列表
    infinity = float('inf')  #表示无限大
    costs = {}
    costs['a'] = 6
    costs['b'] = 2
    costs['fin'] = infinity

    #创建父节点散列表
    parents= {}
    parents['a'] = 'start'
    parents['b'] = 'start'
    parents['fin'] = None

    #记录已经处理过的节点
    processed = []
    
    #找到最便宜节点的函数
    def find_lowest_cost_node(costs):                           
        lowest_cost = float('inf')
        lowest_cost_node = None
        for node in costs.keys():
            cost = costs[node]
            if cost < lowest_cost and node not in processed:
                lowest_cost = cost
                lowest_cost_node = node
        return lowest_cost_node
        
    #主程序
    node = find_lowest_cost_node(costs)
    while node is not None:
        cost = costs[node]                            
        neighbors = graph[node]
        for each in neighbors.keys():                   #遍历当前节点的所有邻居, 并且判断是否更新其开销以及父节点
            new_total_cost = cost + neighbors[each]
            if new_total_cost < costs[each]:
                costs[each] = new_total_cost
                parents[each] = node
        processed.append(node)
        node = find_lowest_cost_node(costs)
